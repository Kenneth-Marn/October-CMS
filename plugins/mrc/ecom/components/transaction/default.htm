{% set product = __SELF__.product %}

<div class="wrapper flex_box">
  <form id="payment-form" data-request="onPurchaseSubmit"
    data-request-complete="clearToken(this, context, data, textStatus, jqXHR);" data-request-flash
    data-request-validate>

    <div class="group">
      <label>
        <span>Coupon</span>
        <input name="coupon" id="coupon" class="field" />
        <div class="button_wrapper" id="couponButton">
          {% partial '::applycouponPartial' %}
        </div>
        <div class="error-msg" data-validate-for="coupon"></div>
      </label>
      <label>
        <span>Name</span>
        <input id='cardholderName' name="cardholderName" class="field" />
      </label>
      <label>
        <span>Card</span>
        <div id="card-element" class="field"></div>
        <!-- Used to display form errors. -->
      </label>
    </div>
    <div class="button_wrapper submitPayment">
      <button>
        submit
      </button>
    </div>
    <div id="pricePartial">
      {% partial '::pricePartial' %}
    </div>
  </form>
</div>



{% put scripts %}
<script>

  // Create a Stripe client.
  var stripe = Stripe("{{ stripePublicKey }}");

  // Create an instance of Elements.
  var elements = stripe.elements();

  // Custom styling can be passed to options when creating an Element.
  // (Note that this demo uses a wider set of styles than the guide below.)
  var style = {
    base: {
      color: "#32325d",
      fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
      fontSmoothing: "antialiased",
      fontSize: "16px",
      "::placeholder": {
        color: "#aab7c4"
      }
    },
    invalid: {
      color: "#fa755a",
      iconColor: "#fa755a"
    }
  };

  // Create an instance of the card Element.
  var card = elements.create("card", { hidePostalCode: true, style: style });

  // Add an instance of the card Element into the `card-element` <div>.
  card.mount("#card-element");

  // Handle real-time validation errors from the card Element.
  card.addEventListener("change", function (event) {
    var displayError = document.getElementById("card-errors");
    if (event.error) {
      displayError.textContent = event.error.message;
    } else {
      displayError.textContent = "";
    }
  });

  $(document).on("click", ".applyCoupon", function (event) {
    $(this).attr("disabled", true);
    event.preventDefault();
    let couponCode = $('#coupon').val();

    if (typeof couponCode === 'string' && couponCode.trim() !== '') {
      $.request('onApplyCoupon', {
        flash: 1,
        data: { couponCode: couponCode },
        update: { '{{ __SELF__ }}::pricePartial': '#pricePartial', '{{ __SELF__ }}::removecouponPartial': '#couponButton' },
        afterUpdate: function () {
          $('#coupon').attr('disabled', true);
        },
        error: function (content, type) {
          $('.applyCoupon').removeAttr("disabled");
          $('#coupon').attr('disabled', true);
          $.oc.flashMsg({ text: "Invalid Coupon", class: 'error' });
        }
      });
    } else {
      $(this).removeAttr("disabled");
      $.oc.flashMsg({ text: "Coupon is empty", class: 'error' });
    }
  });

  $(document).on("click", ".removeCoupon", function (event) {
    $(this).attr("disabled", true);
    event.preventDefault();
    $.request('onRemoveCoupon', {
      update: { '{{ __SELF__ }}::pricePartial': '#pricePartial', '{{ __SELF__ }}::applycouponPartial': '#couponButton' },
      afterUpdate: function () {
          $('#coupon').removeAttr('disabled').val('');
        },
      error: function (content, type) {
        $('.applyCoupon').removeAttr("disabled");
        console.log(content);
        $.oc.flashMsg({ text: "Invalid Coupon", class: 'error' });
      }
    });
  });



  $(document).on("click", ".submitPayment", function (event) {
    $(this).attr("disabled", true);
    event.preventDefault();
    var options = {
      name: $('#cardholderName').val(),
    };

    stripe.createToken(card, options).then(function (result) {
      if (result.error) {
        $('.subitPayment').attr('disabled', false);
        // Inform the user if there was an error.
        var errorElement = document.getElementById("card-errors");
        errorElement.textContent = result.error.message;
      } else {
        // Send the token to your server.
        stripeTokenHandler(result.token, this);
      }
    });
  });

  // Submit the form with the token ID.
  function stripeTokenHandler(token, target) {
    // Insert the token ID into the form so it gets submitted to the server
    var form = document.getElementById('payment-form');
    var hiddenInput = document.createElement('input');
    hiddenInput.setAttribute('type', 'hidden');
    hiddenInput.setAttribute('name', 'stripeToken');
    hiddenInput.setAttribute('value', token.id);
    performPurchase(hiddenInput, form, function () {

      var number = $('#card-errors').children().length;
      if ($('#card-errors').children().length == 0) {
        $('form').submit();
      }
    })
  }

  function performPurchase(hiddenInput, form, callback) {
    var form = document.getElementById("payment-form");
    form.appendChild(hiddenInput);
    callback();
  }

  function clearToken(form, text, data, textStatus, jqXHR) {
    $('input[name="stripeToken"]').remove();
    if (textStatus == 'success') {
      $('#payment-form').each(function () {
        this.reset();
      });
      card.clear();
    }

    $('.subitPayment').attr('disabled', false);
  }
</script>
{% endput %}